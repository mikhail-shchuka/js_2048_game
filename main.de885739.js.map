{"version":3,"sources":["scripts/main.js"],"names":["createBoard","gameBoard","innerHTML","i","square","j","cell","document","createElement","className","id","append","root","firstElementChild","after","style","width","cellSize","gapSize","generate","probability","Math","random","rowIndex","floor","columnIndex","newValue","values","updateBoard","getElementById","value","innerText","classList","add","moveRow","direction","check","needNewValue","row","reverse","slide","moveColumn","push","newRow","filter","num","length","score","scoreElement","messages","querySelector","remove","removeEventListener","moveHandler","e","key","some","prevValues","map","slice","touchMoveHandler","touchStartHandler","touchEndHandler","preventDefault","touchStart","changedTouches","clientX","clientY","touchEnd","item","index","abs","button","levels","isStarted","Array","fill","addEventListener","click","target","matches","nextElementSibling","previousElementSibling","newEvent","MouseEvent","dispatchEvent","children","forEach","currentTarget","blur","message","passive"],"mappings":"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","file":"main.de885739.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction createBoard() {\n  gameBoard.innerHTML = '';\n\n  for (let i = 0; i < square; i++) {\n    for (let j = 0; j < square; j++) {\n      const cell = document.createElement('div');\n\n      cell.className = 'field-cell';\n      cell.id = `${i + '-' + j}`;\n      gameBoard.append(cell);\n    }\n  }\n  root.firstElementChild.after(gameBoard);\n  root.style.width = square * cellSize + (square - 1) * gapSize + 'px';\n}\n\nfunction generate() {\n  const probability = Math.random();\n  const rowIndex = Math.floor(Math.random() * square);\n  const columnIndex = Math.floor(Math.random() * square);\n  let newValue = 2;\n\n  if (probability <= 0.1) {\n    newValue = 4;\n  }\n\n  if (values[rowIndex][columnIndex] === 0) {\n    values[rowIndex][columnIndex] = newValue;\n\n    const cell = document.getElementById(`${rowIndex + '-' + columnIndex}`);\n\n    updateBoard(cell, newValue);\n  } else {\n    generate();\n  }\n}\n\nfunction updateBoard(cell, value) {\n  cell.innerText = value === 0 ? '' : value;\n  cell.className = '';\n  cell.classList.add('field-cell');\n  cell.classList.add(`field-cell--${value}`);\n}\n\nfunction moveRow(direction, check) {\n  needNewValue = false;\n\n  for (let rowIndex = 0; rowIndex < square; rowIndex++) {\n    let row = values[rowIndex];\n\n    if (direction === 'right') {\n      row.reverse();\n    }\n\n    row = slide(row, check);\n\n    if (direction === 'right') {\n      row.reverse();\n    }\n\n    values[rowIndex] = row;\n\n    if (!check) {\n      for (let columnIndex = 0; columnIndex < square; columnIndex++) {\n        const cell = document.getElementById(`${rowIndex + '-' + columnIndex}`);\n        const value = values[rowIndex][columnIndex];\n\n        updateBoard(cell, value);\n      }\n    }\n  }\n}\n\nfunction moveColumn(direction, check) {\n  needNewValue = false;\n\n  for (let columnIndex = 0; columnIndex < square; columnIndex++) {\n    let row = [];\n\n    for (let rowIndex = 0; rowIndex < square; rowIndex++) {\n      row.push(values[rowIndex][columnIndex]);\n    }\n\n    if (direction === 'down') {\n      row.reverse();\n    }\n\n    row = slide(row, check);\n\n    if (direction === 'down') {\n      row.reverse();\n    }\n\n    if (!check) {\n      for (let rowIndex = 0; rowIndex < square; rowIndex++) {\n        values[rowIndex][columnIndex] = row[rowIndex];\n\n        const cell = document.getElementById(`${rowIndex + '-' + columnIndex}`);\n        const value = values[rowIndex][columnIndex];\n\n        updateBoard(cell, value);\n      }\n    }\n  }\n}\n\nfunction slide(row, check) {\n  let newRow = row.filter(num => num !== 0);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      if (!check) {\n        score += newRow[i];\n        scoreElement.innerText = score;\n      }\n\n      if (newRow[i] === 2048) {\n        messages.querySelector('.message-win').classList.remove('hidden');\n        document.removeEventListener('keydown', moveHandler);\n      }\n    }\n  }\n  newRow = newRow.filter(num => num !== 0);\n\n  while (newRow.length < square) {\n    newRow.push(0);\n  }\n\n  for (let i = 0; i < square; i++) {\n    if (newRow[i] !== row[i]) {\n      needNewValue = true;\n      break;\n    }\n  }\n\n  return newRow;\n}\n\nfunction moveHandler(e) {\n  switch (e.key) {\n    case 'ArrowLeft':\n      moveRow('left');\n      break;\n    case 'ArrowRight':\n      moveRow('right');\n      break;\n    case 'ArrowUp':\n      moveColumn('up');\n      break;\n    case 'ArrowDown':\n      moveColumn('down');\n      break;\n  }\n\n  if (needNewValue) {\n    generate();\n  } else if (values.some(row => row.some(cell => cell === 0))) {\n    return 0;\n  } else {\n    const prevValues = values.map(row => row.slice());\n\n    moveColumn('up', 'check');\n\n    if (!needNewValue) {\n      moveColumn('down', 'check');\n\n      if (!needNewValue) {\n        moveColumn('right', 'check');\n\n        if (!needNewValue) {\n          moveColumn('left', 'check');\n        }\n      }\n    }\n\n    if (needNewValue) {\n      needNewValue = false;\n      values = prevValues;\n    } else {\n      document.removeEventListener('keydown', moveHandler);\n      document.removeEventListener('touchmove', touchMoveHandler);\n      document.removeEventListener('touchstart', touchStartHandler);\n      document.removeEventListener('touchend', touchEndHandler);\n      messages.querySelector('.message-lose').classList.remove('hidden');\n    }\n  }\n}\n\nfunction touchMoveHandler(e) {\n  e.preventDefault();\n}\n\nfunction touchStartHandler(e) {\n  touchStart = [e.changedTouches[0].clientX, e.changedTouches[0].clientY];\n}\n\nfunction touchEndHandler(e) {\n  touchEnd = [e.changedTouches[0].clientX, e.changedTouches[0].clientY];\n\n  const direction = touchEnd.map((item, index) => item - touchStart[index]);\n\n  if (direction[0] === 0 && direction[1] === 0) {\n    return;\n  }\n\n  if (Math.abs(direction[0]) > Math.abs(direction[1])) {\n    if (direction[0] > 0) {\n      moveHandler({ key: 'ArrowRight' });\n    } else {\n      moveHandler({ key: 'ArrowLeft' });\n    }\n  } else {\n    if (direction[1] > 0) {\n      moveHandler({ key: 'ArrowDown' });\n    } else {\n      moveHandler({ key: 'ArrowUp' });\n    }\n  }\n}\n\nconst button = document.querySelector('.start');\nconst messages = document.querySelector('.message-container');\nconst levels = document.querySelector('.levels');\nconst scoreElement = document.querySelector('.game-score');\nconst root = document.querySelector('.container');\n\nconst cellSize = 75;\nconst gapSize = 10;\n\nlet isStarted = false;\nlet square = 4;\nlet score = 0;\nlet needNewValue = false;\nlet values = Array(square).fill([]).map(row => Array(square).fill(0));\nlet touchStart = [];\nlet touchEnd = [];\n\nconst gameBoard = document.createElement('div');\n\ngameBoard.className = 'game-field';\n\ncreateBoard();\n\nlevels.addEventListener('click', click => {\n  if (!click.target.matches('.level')) {\n    return;\n  }\n\n  if (square !== +click.target.value) {\n    square = +click.target.value;\n    click.target.classList.add('selected');\n\n    if (click.target.nextElementSibling) {\n      click.target.nextElementSibling.classList.remove('selected');\n    } else {\n      click.target.previousElementSibling.classList.remove('selected');\n    }\n\n    values = Array(square).fill([]).map(row => Array(square).fill(0));\n\n    createBoard();\n\n    if (isStarted) {\n      const newEvent = new MouseEvent('click');\n\n      button.dispatchEvent(newEvent);\n    }\n  }\n});\n\nbutton.addEventListener('click', click => {\n  if (!isStarted) {\n    click.currentTarget.innerText = 'Restart';\n    click.currentTarget.className = 'button restart';\n    isStarted = true;\n  } else {\n    values = Array(square).fill([]).map(row => Array(square).fill(0));\n    score = 0;\n\n    [...gameBoard.children].forEach(cell => {\n      updateBoard(cell, 0);\n    });\n  }\n\n  click.currentTarget.blur();\n\n  [...messages.children].forEach(message => {\n    message.classList.add('hidden');\n  });\n\n  generate();\n  generate();\n\n  document.addEventListener('keydown', moveHandler);\n  document.addEventListener('touchmove', touchMoveHandler, { passive: false });\n  document.addEventListener('touchstart', touchStartHandler);\n  document.addEventListener('touchend', touchEndHandler);\n});\n"]}